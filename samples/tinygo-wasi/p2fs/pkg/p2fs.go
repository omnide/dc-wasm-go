// Generated by `wit-bindgen` 0.17.0. DO NOT EDIT!
package p2fs

// #include "p2fs.h"
import "C"
import "unsafe"
import "fmt"
// Import functions from wasi:io/error@0.2.0
// WasiIo0_2_0_ErrorError is a handle to imported resource error
type WasiIo0_2_0_ErrorError int32

//go:wasmimport wasi:io/error@0.2.0 [resource-drop]error
func _WasiIo0_2_0_ErrorError_drop(self WasiIo0_2_0_ErrorError)

func (self WasiIo0_2_0_ErrorError) Drop() {
  _WasiIo0_2_0_ErrorError_drop(self)
}

func (self WasiIo0_2_0_ErrorError) ToDebugString() string {
  var lower_self C.wasi_io_error_borrow_error_t
  lower_self.__handle = C.int32_t(self)
  var ret C.p2fs_string_t
  C.wasi_io_error_method_error_to_debug_string(lower_self , &ret )
  var lift_ret string
  lift_ret = C.GoStringN((*C.char)(unsafe.Pointer(ret.ptr)), C.int(ret.len))
  return lift_ret
}

// Import functions from wasi:io/poll@0.2.0
// WasiIo0_2_0_PollPollable is a handle to imported resource pollable
type WasiIo0_2_0_PollPollable int32

//go:wasmimport wasi:io/poll@0.2.0 [resource-drop]pollable
func _WasiIo0_2_0_PollPollable_drop(self WasiIo0_2_0_PollPollable)

func (self WasiIo0_2_0_PollPollable) Drop() {
  _WasiIo0_2_0_PollPollable_drop(self)
}

func (self WasiIo0_2_0_PollPollable) Ready() bool {
  var lower_self C.wasi_io_poll_borrow_pollable_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_io_poll_method_pollable_ready(lower_self )
  lift_ret := ret
  return lift_ret
}

func (self WasiIo0_2_0_PollPollable) Block() {
  var lower_self C.wasi_io_poll_borrow_pollable_t
  lower_self.__handle = C.int32_t(self)
  C.wasi_io_poll_method_pollable_block(lower_self )
}

func WasiIo0_2_0_PollPoll(in []WasiIo0_2_0_PollPollable) []uint32 {
  var lower_in C.wasi_io_poll_list_borrow_pollable_t
  if len(in) == 0 {
    lower_in.ptr = nil
    lower_in.len = 0
  } else {
    var empty_lower_in C.wasi_io_poll_borrow_pollable_t
    lower_in.ptr = (*C.wasi_io_poll_borrow_pollable_t)(C.malloc(C.size_t(len(in)) * C.size_t(unsafe.Sizeof(empty_lower_in))))
    lower_in.len = C.size_t(len(in))
    for lower_in_i := range in {
      lower_in_ptr := (*C.wasi_io_poll_borrow_pollable_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_in.ptr)) +
      uintptr(lower_in_i)*unsafe.Sizeof(empty_lower_in)))
      var lower_in_ptr_value C.wasi_io_poll_borrow_pollable_t
      lower_in_ptr_value.__handle = C.int32_t(in[lower_in_i])
      *lower_in_ptr = lower_in_ptr_value
    }
  }
  var ret C.p2fs_list_u32_t
  C.wasi_io_poll_poll(&lower_in , &ret )
  var lift_ret []uint32
  lift_ret = make([]uint32, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.uint32_t
      lift_ret_ptr := *(*C.uint32_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret uint32
      list_lift_ret = uint32(lift_ret_ptr)
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

// Import functions from wasi:io/streams@0.2.0
type WasiIo0_2_0_StreamsError = WasiIo0_2_0_ErrorError
type WasiIo0_2_0_StreamsPollable = WasiIo0_2_0_PollPollable
type WasiIo0_2_0_StreamsStreamErrorKind int

const (
WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed WasiIo0_2_0_StreamsStreamErrorKind = iota
WasiIo0_2_0_StreamsStreamErrorKindClosed
)

type WasiIo0_2_0_StreamsStreamError struct {
  kind WasiIo0_2_0_StreamsStreamErrorKind
  val any
}

func (n WasiIo0_2_0_StreamsStreamError) Kind() WasiIo0_2_0_StreamsStreamErrorKind {
  return n.kind
}

func WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(v WasiIo0_2_0_StreamsError) WasiIo0_2_0_StreamsStreamError{
  return WasiIo0_2_0_StreamsStreamError{kind: WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed, val: v}
}

func (n WasiIo0_2_0_StreamsStreamError) GetLastOperationFailed() WasiIo0_2_0_StreamsError{
  if g, w := n.Kind(), WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiIo0_2_0_StreamsError)
}

func (n *WasiIo0_2_0_StreamsStreamError) SetLastOperationFailed(v WasiIo0_2_0_StreamsError) {
  n.val = v
  n.kind = WasiIo0_2_0_StreamsStreamErrorKindLastOperationFailed
}

func WasiIo0_2_0_StreamsStreamErrorClosed() WasiIo0_2_0_StreamsStreamError{
  return WasiIo0_2_0_StreamsStreamError{kind: WasiIo0_2_0_StreamsStreamErrorKindClosed}
}

// WasiIo0_2_0_StreamsInputStream is a handle to imported resource input-stream
type WasiIo0_2_0_StreamsInputStream int32

//go:wasmimport wasi:io/streams@0.2.0 [resource-drop]input-stream
func _WasiIo0_2_0_StreamsInputStream_drop(self WasiIo0_2_0_StreamsInputStream)

func (self WasiIo0_2_0_StreamsInputStream) Drop() {
  _WasiIo0_2_0_StreamsInputStream_drop(self)
}

// WasiIo0_2_0_StreamsOutputStream is a handle to imported resource output-stream
type WasiIo0_2_0_StreamsOutputStream int32

//go:wasmimport wasi:io/streams@0.2.0 [resource-drop]output-stream
func _WasiIo0_2_0_StreamsOutputStream_drop(self WasiIo0_2_0_StreamsOutputStream)

func (self WasiIo0_2_0_StreamsOutputStream) Drop() {
  _WasiIo0_2_0_StreamsOutputStream_drop(self)
}

func (self WasiIo0_2_0_StreamsInputStream) Read(len uint64) Result[[]uint8, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_list_u8_stream_error_t
  C.wasi_io_streams_method_input_stream_read(lower_self , lower_len , &ret )
  var lift_ret Result[[]uint8, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.p2fs_list_u8_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []uint8
    lift_ret_val = make([]uint8, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.uint8_t
        lift_ret_val_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val uint8
        list_lift_ret_val = uint8(lift_ret_val_ptr)
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) BlockingRead(len uint64) Result[[]uint8, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_list_u8_stream_error_t
  C.wasi_io_streams_method_input_stream_blocking_read(lower_self , lower_len , &ret )
  var lift_ret Result[[]uint8, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.p2fs_list_u8_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val []uint8
    lift_ret_val = make([]uint8, lift_ret_ptr.len)
    if lift_ret_ptr.len > 0 {
      for lift_ret_val_i := 0; lift_ret_val_i < int(lift_ret_ptr.len); lift_ret_val_i++ {
        var empty_lift_ret_val C.uint8_t
        lift_ret_val_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.ptr)) +
        uintptr(lift_ret_val_i)*unsafe.Sizeof(empty_lift_ret_val)))
        var list_lift_ret_val uint8
        list_lift_ret_val = uint8(lift_ret_val_ptr)
        lift_ret_val[lift_ret_val_i] = list_lift_ret_val
      }
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) Skip(len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_input_stream_skip(lower_self , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) BlockingSkip(len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_input_stream_blocking_skip(lower_self , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsInputStream) Subscribe() WasiIo0_2_0_StreamsPollable {
  var lower_self C.wasi_io_streams_borrow_input_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_io_streams_method_input_stream_subscribe(lower_self )
  var lift_ret WasiIo0_2_0_StreamsPollable
  lift_ret = WasiIo0_2_0_StreamsPollable(ret.__handle)
  
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) CheckWrite() Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_output_stream_check_write(lower_self , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Write(contents []uint8) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_contents C.p2fs_list_u8_t
  if len(contents) == 0 {
    lower_contents.ptr = nil
    lower_contents.len = 0
  } else {
    var empty_lower_contents C.uint8_t
    lower_contents.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(contents)) * C.size_t(unsafe.Sizeof(empty_lower_contents))))
    lower_contents.len = C.size_t(len(contents))
    for lower_contents_i := range contents {
      lower_contents_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_contents.ptr)) +
      uintptr(lower_contents_i)*unsafe.Sizeof(empty_lower_contents)))
      lower_contents_ptr_value := C.uint8_t(contents[lower_contents_i])
      *lower_contents_ptr = lower_contents_ptr_value
    }
  }
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_write(lower_self , &lower_contents , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingWriteAndFlush(contents []uint8) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_contents C.p2fs_list_u8_t
  if len(contents) == 0 {
    lower_contents.ptr = nil
    lower_contents.len = 0
  } else {
    var empty_lower_contents C.uint8_t
    lower_contents.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(contents)) * C.size_t(unsafe.Sizeof(empty_lower_contents))))
    lower_contents.len = C.size_t(len(contents))
    for lower_contents_i := range contents {
      lower_contents_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_contents.ptr)) +
      uintptr(lower_contents_i)*unsafe.Sizeof(empty_lower_contents)))
      lower_contents_ptr_value := C.uint8_t(contents[lower_contents_i])
      *lower_contents_ptr = lower_contents_ptr_value
    }
  }
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_write_and_flush(lower_self , &lower_contents , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Flush() Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_flush(lower_self , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingFlush() Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_flush(lower_self , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Subscribe() WasiIo0_2_0_StreamsPollable {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_io_streams_method_output_stream_subscribe(lower_self )
  var lift_ret WasiIo0_2_0_StreamsPollable
  lift_ret = WasiIo0_2_0_StreamsPollable(ret.__handle)
  
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) WriteZeroes(len uint64) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_write_zeroes(lower_self , lower_len , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingWriteZeroesAndFlush(len uint64) Result[struct{}, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_void_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_write_zeroes_and_flush(lower_self , lower_len , &ret )
  var lift_ret Result[struct{}, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) Splice(src WasiIo0_2_0_StreamsInputStream, len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_src C.wasi_io_streams_borrow_input_stream_t
  lower_src.__handle = C.int32_t(src)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_output_stream_splice(lower_self , lower_src , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiIo0_2_0_StreamsOutputStream) BlockingSplice(src WasiIo0_2_0_StreamsInputStream, len uint64) Result[uint64, WasiIo0_2_0_StreamsStreamError] {
  var lower_self C.wasi_io_streams_borrow_output_stream_t
  lower_self.__handle = C.int32_t(self)
  var lower_src C.wasi_io_streams_borrow_input_stream_t
  lower_src.__handle = C.int32_t(src)
  lower_len := C.uint64_t(len)
  var ret C.wasi_io_streams_result_u64_stream_error_t
  C.wasi_io_streams_method_output_stream_blocking_splice(lower_self , lower_src , lower_len , &ret )
  var lift_ret Result[uint64, WasiIo0_2_0_StreamsStreamError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_io_streams_stream_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiIo0_2_0_StreamsStreamError
    if lift_ret_ptr.tag == 0 {
      lift_ret_val_ptr := *(*C.wasi_io_streams_own_error_t)(unsafe.Pointer(&lift_ret_ptr.val))
      var lift_ret_val_val WasiIo0_2_0_StreamsError
      lift_ret_val_val = WasiIo0_2_0_StreamsError(lift_ret_val_ptr.__handle)
      
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorLastOperationFailed(lift_ret_val_val)
    }
    if lift_ret_ptr.tag == 1 {
      lift_ret_val = WasiIo0_2_0_StreamsStreamErrorClosed()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.uint64_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val uint64
    lift_ret_val = uint64(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:clocks/wall-clock@0.2.0
type WasiClocks0_2_0_WallClockDatetime struct {
  Seconds uint64
  Nanoseconds uint32
}

func WasiClocks0_2_0_WallClockNow() WasiClocks0_2_0_WallClockDatetime {
  var ret C.wasi_clocks_wall_clock_datetime_t
  C.wasi_clocks_wall_clock_now(&ret )
  var lift_ret WasiClocks0_2_0_WallClockDatetime
  var lift_ret_Seconds uint64
  lift_ret_Seconds = uint64(ret.seconds)
  lift_ret.Seconds = lift_ret_Seconds
  var lift_ret_Nanoseconds uint32
  lift_ret_Nanoseconds = uint32(ret.nanoseconds)
  lift_ret.Nanoseconds = lift_ret_Nanoseconds
  return lift_ret
}

func WasiClocks0_2_0_WallClockResolution() WasiClocks0_2_0_WallClockDatetime {
  var ret C.wasi_clocks_wall_clock_datetime_t
  C.wasi_clocks_wall_clock_resolution(&ret )
  var lift_ret WasiClocks0_2_0_WallClockDatetime
  var lift_ret_Seconds uint64
  lift_ret_Seconds = uint64(ret.seconds)
  lift_ret.Seconds = lift_ret_Seconds
  var lift_ret_Nanoseconds uint32
  lift_ret_Nanoseconds = uint32(ret.nanoseconds)
  lift_ret.Nanoseconds = lift_ret_Nanoseconds
  return lift_ret
}

// Import functions from wasi:filesystem/types@0.2.0
type WasiFilesystem0_2_0_TypesInputStream = WasiIo0_2_0_StreamsInputStream
type WasiFilesystem0_2_0_TypesOutputStream = WasiIo0_2_0_StreamsOutputStream
type WasiFilesystem0_2_0_TypesError = WasiIo0_2_0_StreamsError
type WasiFilesystem0_2_0_TypesDatetime = WasiClocks0_2_0_WallClockDatetime
type WasiFilesystem0_2_0_TypesFilesize = uint64
type WasiFilesystem0_2_0_TypesDescriptorTypeKind int

const (
WasiFilesystem0_2_0_TypesDescriptorTypeKindUnknown WasiFilesystem0_2_0_TypesDescriptorTypeKind = iota
WasiFilesystem0_2_0_TypesDescriptorTypeKindBlockDevice
WasiFilesystem0_2_0_TypesDescriptorTypeKindCharacterDevice
WasiFilesystem0_2_0_TypesDescriptorTypeKindDirectory
WasiFilesystem0_2_0_TypesDescriptorTypeKindFifo
WasiFilesystem0_2_0_TypesDescriptorTypeKindSymbolicLink
WasiFilesystem0_2_0_TypesDescriptorTypeKindRegularFile
WasiFilesystem0_2_0_TypesDescriptorTypeKindSocket
)

type WasiFilesystem0_2_0_TypesDescriptorType struct {
  kind WasiFilesystem0_2_0_TypesDescriptorTypeKind
}

func (n WasiFilesystem0_2_0_TypesDescriptorType) Kind() WasiFilesystem0_2_0_TypesDescriptorTypeKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesDescriptorTypeUnknown() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindUnknown}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindBlockDevice}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindCharacterDevice}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeDirectory() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindDirectory}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeFifo() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindFifo}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindSymbolicLink}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindRegularFile}
}

func WasiFilesystem0_2_0_TypesDescriptorTypeSocket() WasiFilesystem0_2_0_TypesDescriptorType{
  return WasiFilesystem0_2_0_TypesDescriptorType{kind: WasiFilesystem0_2_0_TypesDescriptorTypeKindSocket}
}

type WasiFilesystem0_2_0_TypesDescriptorFlags uint64
const (
WasiFilesystem0_2_0_TypesDescriptorFlags_READ WasiFilesystem0_2_0_TypesDescriptorFlags = 1 << iota
WasiFilesystem0_2_0_TypesDescriptorFlags_WRITE
WasiFilesystem0_2_0_TypesDescriptorFlags_FILE-INTEGRITY-SYNC
WasiFilesystem0_2_0_TypesDescriptorFlags_DATA-INTEGRITY-SYNC
WasiFilesystem0_2_0_TypesDescriptorFlags_REQUESTED-WRITE-SYNC
WasiFilesystem0_2_0_TypesDescriptorFlags_MUTATE-DIRECTORY
)

type WasiFilesystem0_2_0_TypesPathFlags uint64
const (
WasiFilesystem0_2_0_TypesPathFlags_SYMLINK-FOLLOW WasiFilesystem0_2_0_TypesPathFlags = 1 << iota
)

type WasiFilesystem0_2_0_TypesOpenFlags uint64
const (
WasiFilesystem0_2_0_TypesOpenFlags_CREATE WasiFilesystem0_2_0_TypesOpenFlags = 1 << iota
WasiFilesystem0_2_0_TypesOpenFlags_DIRECTORY
WasiFilesystem0_2_0_TypesOpenFlags_EXCLUSIVE
WasiFilesystem0_2_0_TypesOpenFlags_TRUNCATE
)

type WasiFilesystem0_2_0_TypesLinkCount = uint64
type WasiFilesystem0_2_0_TypesDescriptorStat struct {
  Type WasiFilesystem0_2_0_TypesDescriptorType
  LinkCount WasiFilesystem0_2_0_TypesLinkCount
  Size WasiFilesystem0_2_0_TypesFilesize
  DataAccessTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
  DataModificationTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
  StatusChangeTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
}

type WasiFilesystem0_2_0_TypesNewTimestampKind int

const (
WasiFilesystem0_2_0_TypesNewTimestampKindNoChange WasiFilesystem0_2_0_TypesNewTimestampKind = iota
WasiFilesystem0_2_0_TypesNewTimestampKindNow
WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp
)

type WasiFilesystem0_2_0_TypesNewTimestamp struct {
  kind WasiFilesystem0_2_0_TypesNewTimestampKind
  val any
}

func (n WasiFilesystem0_2_0_TypesNewTimestamp) Kind() WasiFilesystem0_2_0_TypesNewTimestampKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesNewTimestampNoChange() WasiFilesystem0_2_0_TypesNewTimestamp{
  return WasiFilesystem0_2_0_TypesNewTimestamp{kind: WasiFilesystem0_2_0_TypesNewTimestampKindNoChange}
}

func WasiFilesystem0_2_0_TypesNewTimestampNow() WasiFilesystem0_2_0_TypesNewTimestamp{
  return WasiFilesystem0_2_0_TypesNewTimestamp{kind: WasiFilesystem0_2_0_TypesNewTimestampKindNow}
}

func WasiFilesystem0_2_0_TypesNewTimestampTimestamp(v WasiFilesystem0_2_0_TypesDatetime) WasiFilesystem0_2_0_TypesNewTimestamp{
  return WasiFilesystem0_2_0_TypesNewTimestamp{kind: WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp, val: v}
}

func (n WasiFilesystem0_2_0_TypesNewTimestamp) GetTimestamp() WasiFilesystem0_2_0_TypesDatetime{
  if g, w := n.Kind(), WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp; g != w {
    panic(fmt.Sprintf("Attr kind is %v, not %v", g, w))
  }
  return n.val.(WasiFilesystem0_2_0_TypesDatetime)
}

func (n *WasiFilesystem0_2_0_TypesNewTimestamp) SetTimestamp(v WasiFilesystem0_2_0_TypesDatetime) {
  n.val = v
  n.kind = WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp
}

type WasiFilesystem0_2_0_TypesDirectoryEntry struct {
  Type WasiFilesystem0_2_0_TypesDescriptorType
  Name string
}

type WasiFilesystem0_2_0_TypesErrorCodeKind int

const (
WasiFilesystem0_2_0_TypesErrorCodeKindAccess WasiFilesystem0_2_0_TypesErrorCodeKind = iota
WasiFilesystem0_2_0_TypesErrorCodeKindWouldBlock
WasiFilesystem0_2_0_TypesErrorCodeKindAlready
WasiFilesystem0_2_0_TypesErrorCodeKindBadDescriptor
WasiFilesystem0_2_0_TypesErrorCodeKindBusy
WasiFilesystem0_2_0_TypesErrorCodeKindDeadlock
WasiFilesystem0_2_0_TypesErrorCodeKindQuota
WasiFilesystem0_2_0_TypesErrorCodeKindExist
WasiFilesystem0_2_0_TypesErrorCodeKindFileTooLarge
WasiFilesystem0_2_0_TypesErrorCodeKindIllegalByteSequence
WasiFilesystem0_2_0_TypesErrorCodeKindInProgress
WasiFilesystem0_2_0_TypesErrorCodeKindInterrupted
WasiFilesystem0_2_0_TypesErrorCodeKindInvalid
WasiFilesystem0_2_0_TypesErrorCodeKindIo
WasiFilesystem0_2_0_TypesErrorCodeKindIsDirectory
WasiFilesystem0_2_0_TypesErrorCodeKindLoop
WasiFilesystem0_2_0_TypesErrorCodeKindTooManyLinks
WasiFilesystem0_2_0_TypesErrorCodeKindMessageSize
WasiFilesystem0_2_0_TypesErrorCodeKindNameTooLong
WasiFilesystem0_2_0_TypesErrorCodeKindNoDevice
WasiFilesystem0_2_0_TypesErrorCodeKindNoEntry
WasiFilesystem0_2_0_TypesErrorCodeKindNoLock
WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientMemory
WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientSpace
WasiFilesystem0_2_0_TypesErrorCodeKindNotDirectory
WasiFilesystem0_2_0_TypesErrorCodeKindNotEmpty
WasiFilesystem0_2_0_TypesErrorCodeKindNotRecoverable
WasiFilesystem0_2_0_TypesErrorCodeKindUnsupported
WasiFilesystem0_2_0_TypesErrorCodeKindNoTty
WasiFilesystem0_2_0_TypesErrorCodeKindNoSuchDevice
WasiFilesystem0_2_0_TypesErrorCodeKindOverflow
WasiFilesystem0_2_0_TypesErrorCodeKindNotPermitted
WasiFilesystem0_2_0_TypesErrorCodeKindPipe
WasiFilesystem0_2_0_TypesErrorCodeKindReadOnly
WasiFilesystem0_2_0_TypesErrorCodeKindInvalidSeek
WasiFilesystem0_2_0_TypesErrorCodeKindTextFileBusy
WasiFilesystem0_2_0_TypesErrorCodeKindCrossDevice
)

type WasiFilesystem0_2_0_TypesErrorCode struct {
  kind WasiFilesystem0_2_0_TypesErrorCodeKind
}

func (n WasiFilesystem0_2_0_TypesErrorCode) Kind() WasiFilesystem0_2_0_TypesErrorCodeKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesErrorCodeAccess() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindAccess}
}

func WasiFilesystem0_2_0_TypesErrorCodeWouldBlock() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindWouldBlock}
}

func WasiFilesystem0_2_0_TypesErrorCodeAlready() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindAlready}
}

func WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindBadDescriptor}
}

func WasiFilesystem0_2_0_TypesErrorCodeBusy() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindBusy}
}

func WasiFilesystem0_2_0_TypesErrorCodeDeadlock() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindDeadlock}
}

func WasiFilesystem0_2_0_TypesErrorCodeQuota() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindQuota}
}

func WasiFilesystem0_2_0_TypesErrorCodeExist() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindExist}
}

func WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindFileTooLarge}
}

func WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindIllegalByteSequence}
}

func WasiFilesystem0_2_0_TypesErrorCodeInProgress() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInProgress}
}

func WasiFilesystem0_2_0_TypesErrorCodeInterrupted() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInterrupted}
}

func WasiFilesystem0_2_0_TypesErrorCodeInvalid() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInvalid}
}

func WasiFilesystem0_2_0_TypesErrorCodeIo() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindIo}
}

func WasiFilesystem0_2_0_TypesErrorCodeIsDirectory() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindIsDirectory}
}

func WasiFilesystem0_2_0_TypesErrorCodeLoop() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindLoop}
}

func WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindTooManyLinks}
}

func WasiFilesystem0_2_0_TypesErrorCodeMessageSize() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindMessageSize}
}

func WasiFilesystem0_2_0_TypesErrorCodeNameTooLong() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNameTooLong}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoDevice() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoDevice}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoEntry() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoEntry}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoLock() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoLock}
}

func WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientMemory}
}

func WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInsufficientSpace}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotDirectory() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotDirectory}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotEmpty() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotEmpty}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotRecoverable}
}

func WasiFilesystem0_2_0_TypesErrorCodeUnsupported() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindUnsupported}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoTty() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoTty}
}

func WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNoSuchDevice}
}

func WasiFilesystem0_2_0_TypesErrorCodeOverflow() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindOverflow}
}

func WasiFilesystem0_2_0_TypesErrorCodeNotPermitted() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindNotPermitted}
}

func WasiFilesystem0_2_0_TypesErrorCodePipe() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindPipe}
}

func WasiFilesystem0_2_0_TypesErrorCodeReadOnly() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindReadOnly}
}

func WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindInvalidSeek}
}

func WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindTextFileBusy}
}

func WasiFilesystem0_2_0_TypesErrorCodeCrossDevice() WasiFilesystem0_2_0_TypesErrorCode{
  return WasiFilesystem0_2_0_TypesErrorCode{kind: WasiFilesystem0_2_0_TypesErrorCodeKindCrossDevice}
}

type WasiFilesystem0_2_0_TypesAdviceKind int

const (
WasiFilesystem0_2_0_TypesAdviceKindNormal WasiFilesystem0_2_0_TypesAdviceKind = iota
WasiFilesystem0_2_0_TypesAdviceKindSequential
WasiFilesystem0_2_0_TypesAdviceKindRandom
WasiFilesystem0_2_0_TypesAdviceKindWillNeed
WasiFilesystem0_2_0_TypesAdviceKindDontNeed
WasiFilesystem0_2_0_TypesAdviceKindNoReuse
)

type WasiFilesystem0_2_0_TypesAdvice struct {
  kind WasiFilesystem0_2_0_TypesAdviceKind
}

func (n WasiFilesystem0_2_0_TypesAdvice) Kind() WasiFilesystem0_2_0_TypesAdviceKind {
  return n.kind
}

func WasiFilesystem0_2_0_TypesAdviceNormal() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindNormal}
}

func WasiFilesystem0_2_0_TypesAdviceSequential() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindSequential}
}

func WasiFilesystem0_2_0_TypesAdviceRandom() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindRandom}
}

func WasiFilesystem0_2_0_TypesAdviceWillNeed() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindWillNeed}
}

func WasiFilesystem0_2_0_TypesAdviceDontNeed() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindDontNeed}
}

func WasiFilesystem0_2_0_TypesAdviceNoReuse() WasiFilesystem0_2_0_TypesAdvice{
  return WasiFilesystem0_2_0_TypesAdvice{kind: WasiFilesystem0_2_0_TypesAdviceKindNoReuse}
}

type WasiFilesystem0_2_0_TypesMetadataHashValue struct {
  Lower uint64
  Upper uint64
}

// WasiFilesystem0_2_0_TypesDescriptor is a handle to imported resource descriptor
type WasiFilesystem0_2_0_TypesDescriptor int32

//go:wasmimport wasi:filesystem/types@0.2.0 [resource-drop]descriptor
func _WasiFilesystem0_2_0_TypesDescriptor_drop(self WasiFilesystem0_2_0_TypesDescriptor)

func (self WasiFilesystem0_2_0_TypesDescriptor) Drop() {
  _WasiFilesystem0_2_0_TypesDescriptor_drop(self)
}

// WasiFilesystem0_2_0_TypesDirectoryEntryStream is a handle to imported resource directory-entry-stream
type WasiFilesystem0_2_0_TypesDirectoryEntryStream int32

//go:wasmimport wasi:filesystem/types@0.2.0 [resource-drop]directory-entry-stream
func _WasiFilesystem0_2_0_TypesDirectoryEntryStream_drop(self WasiFilesystem0_2_0_TypesDirectoryEntryStream)

func (self WasiFilesystem0_2_0_TypesDirectoryEntryStream) Drop() {
  _WasiFilesystem0_2_0_TypesDirectoryEntryStream_drop(self)
}

type WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT struct {
  F0 []uint8
  F1 bool
}

func (self WasiFilesystem0_2_0_TypesDescriptor) ReadViaStream(offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesInputStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_own_input_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_read_via_stream(lower_self , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesInputStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_input_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesInputStream
    lift_ret_val = WasiFilesystem0_2_0_TypesInputStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) WriteViaStream(offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_own_output_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_write_via_stream(lower_self , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesOutputStream
    lift_ret_val = WasiFilesystem0_2_0_TypesOutputStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) AppendViaStream() Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_own_output_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_append_via_stream(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesOutputStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_output_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesOutputStream
    lift_ret_val = WasiFilesystem0_2_0_TypesOutputStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Advise(offset WasiFilesystem0_2_0_TypesFilesize, length WasiFilesystem0_2_0_TypesFilesize, advice WasiFilesystem0_2_0_TypesAdvice) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var lower_length C.uint64_t
  lower_length_val := C.uint64_t(length)
  lower_length = lower_length_val
  var lower_advice C.wasi_filesystem_types_advice_t
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindNormal {
    lower_advice = 0
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindSequential {
    lower_advice = 1
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindRandom {
    lower_advice = 2
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindWillNeed {
    lower_advice = 3
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindDontNeed {
    lower_advice = 4
  }
  if advice.Kind() == WasiFilesystem0_2_0_TypesAdviceKindNoReuse {
    lower_advice = 5
  }
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_advise(lower_self , lower_offset , lower_length , lower_advice , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SyncData() Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_sync_data(lower_self , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) GetFlags() Result[WasiFilesystem0_2_0_TypesDescriptorFlags, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_descriptor_flags_error_code_t
  C.wasi_filesystem_types_method_descriptor_get_flags(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorFlags, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_flags_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorFlags
    lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorFlags(lift_ret_ptr)
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) GetType() Result[WasiFilesystem0_2_0_TypesDescriptorType, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_descriptor_type_error_code_t
  C.wasi_filesystem_types_method_descriptor_get_type(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorType, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_type_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorType
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SetSize(size WasiFilesystem0_2_0_TypesFilesize) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_size C.uint64_t
  lower_size_val := C.uint64_t(size)
  lower_size = lower_size_val
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_set_size(lower_self , lower_size , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SetTimes(data_access_timestamp WasiFilesystem0_2_0_TypesNewTimestamp, data_modification_timestamp WasiFilesystem0_2_0_TypesNewTimestamp) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_data_access_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_access_timestamp.tag = 0
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_access_timestamp.tag = 1
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {
    
    lower_data_access_timestamp.tag = 2
    lower_data_access_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_access_timestamp.val))
    var lower_data_access_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_access_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_access_timestamp_val_val_seconds := C.uint64_t(data_access_timestamp.GetTimestamp().Seconds)
    lower_data_access_timestamp_val_val.seconds = lower_data_access_timestamp_val_val_seconds
    lower_data_access_timestamp_val_val_nanoseconds := C.uint32_t(data_access_timestamp.GetTimestamp().Nanoseconds)
    lower_data_access_timestamp_val_val.nanoseconds = lower_data_access_timestamp_val_val_nanoseconds
    lower_data_access_timestamp_val = lower_data_access_timestamp_val_val
    *lower_data_access_timestamp_ptr = lower_data_access_timestamp_val
  }
  var lower_data_modification_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_modification_timestamp.tag = 0
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_modification_timestamp.tag = 1
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {
    
    lower_data_modification_timestamp.tag = 2
    lower_data_modification_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_modification_timestamp.val))
    var lower_data_modification_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_modification_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_modification_timestamp_val_val_seconds := C.uint64_t(data_modification_timestamp.GetTimestamp().Seconds)
    lower_data_modification_timestamp_val_val.seconds = lower_data_modification_timestamp_val_val_seconds
    lower_data_modification_timestamp_val_val_nanoseconds := C.uint32_t(data_modification_timestamp.GetTimestamp().Nanoseconds)
    lower_data_modification_timestamp_val_val.nanoseconds = lower_data_modification_timestamp_val_val_nanoseconds
    lower_data_modification_timestamp_val = lower_data_modification_timestamp_val_val
    *lower_data_modification_timestamp_ptr = lower_data_modification_timestamp_val
  }
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_set_times(lower_self , &lower_data_access_timestamp , &lower_data_modification_timestamp , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Read(length WasiFilesystem0_2_0_TypesFilesize, offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_length C.uint64_t
  lower_length_val := C.uint64_t(length)
  lower_length = lower_length_val
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_tuple2_list_u8_bool_error_code_t
  C.wasi_filesystem_types_method_descriptor_read(lower_self , lower_length , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.p2fs_tuple2_list_u8_bool_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesTuple2ListU8TBoolT
    var lift_ret_val_F0 []uint8
    lift_ret_val_F0 = make([]uint8, lift_ret_ptr.f0.len)
    if lift_ret_ptr.f0.len > 0 {
      for lift_ret_val_F0_i := 0; lift_ret_val_F0_i < int(lift_ret_ptr.f0.len); lift_ret_val_F0_i++ {
        var empty_lift_ret_val_F0 C.uint8_t
        lift_ret_val_F0_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lift_ret_ptr.f0.ptr)) +
        uintptr(lift_ret_val_F0_i)*unsafe.Sizeof(empty_lift_ret_val_F0)))
        var list_lift_ret_val_F0 uint8
        list_lift_ret_val_F0 = uint8(lift_ret_val_F0_ptr)
        lift_ret_val_F0[lift_ret_val_F0_i] = list_lift_ret_val_F0
      }
    }
    lift_ret_val.F0 = lift_ret_val_F0
    lift_ret_val_F1 := lift_ret_ptr.f1
    lift_ret_val.F1 = lift_ret_val_F1
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Write(buffer []uint8, offset WasiFilesystem0_2_0_TypesFilesize) Result[WasiFilesystem0_2_0_TypesFilesize, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_buffer C.p2fs_list_u8_t
  if len(buffer) == 0 {
    lower_buffer.ptr = nil
    lower_buffer.len = 0
  } else {
    var empty_lower_buffer C.uint8_t
    lower_buffer.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(buffer)) * C.size_t(unsafe.Sizeof(empty_lower_buffer))))
    lower_buffer.len = C.size_t(len(buffer))
    for lower_buffer_i := range buffer {
      lower_buffer_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_buffer.ptr)) +
      uintptr(lower_buffer_i)*unsafe.Sizeof(empty_lower_buffer)))
      lower_buffer_ptr_value := C.uint8_t(buffer[lower_buffer_i])
      *lower_buffer_ptr = lower_buffer_ptr_value
    }
  }
  var lower_offset C.uint64_t
  lower_offset_val := C.uint64_t(offset)
  lower_offset = lower_offset_val
  var ret C.wasi_filesystem_types_result_filesize_error_code_t
  C.wasi_filesystem_types_method_descriptor_write(lower_self , &lower_buffer , lower_offset , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesFilesize, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_filesize_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesFilesize
    var lift_ret_val_val uint64
    lift_ret_val_val = uint64(lift_ret_ptr)
    lift_ret_val = lift_ret_val_val
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) ReadDirectory() Result[WasiFilesystem0_2_0_TypesDirectoryEntryStream, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_own_directory_entry_stream_error_code_t
  C.wasi_filesystem_types_method_descriptor_read_directory(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDirectoryEntryStream, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_directory_entry_stream_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDirectoryEntryStream
    lift_ret_val = WasiFilesystem0_2_0_TypesDirectoryEntryStream(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Sync() Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_sync(lower_self , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) CreateDirectoryAt(path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_create_directory_at(lower_self , &lower_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) Stat() Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_descriptor_stat_error_code_t
  C.wasi_filesystem_types_method_descriptor_stat(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_stat_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorStat
    var lift_ret_val_Type WasiFilesystem0_2_0_TypesDescriptorType
    if lift_ret_ptr.type == 0 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
    }
    if lift_ret_ptr.type == 1 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
    }
    if lift_ret_ptr.type == 2 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
    }
    if lift_ret_ptr.type == 3 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
    }
    if lift_ret_ptr.type == 4 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
    }
    if lift_ret_ptr.type == 5 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
    }
    if lift_ret_ptr.type == 6 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
    }
    if lift_ret_ptr.type == 7 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
    }
    lift_ret_val.Type = lift_ret_val_Type
    var lift_ret_val_LinkCount WasiFilesystem0_2_0_TypesLinkCount
    var lift_ret_val_LinkCount_val uint64
    lift_ret_val_LinkCount_val = uint64(lift_ret_ptr.link_count)
    lift_ret_val_LinkCount = lift_ret_val_LinkCount_val
    lift_ret_val.LinkCount = lift_ret_val_LinkCount
    var lift_ret_val_Size WasiFilesystem0_2_0_TypesFilesize
    var lift_ret_val_Size_val uint64
    lift_ret_val_Size_val = uint64(lift_ret_ptr.size)
    lift_ret_val_Size = lift_ret_val_Size_val
    lift_ret_val.Size = lift_ret_val_Size
    var lift_ret_val_DataAccessTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_access_timestamp.is_some {
      var lift_ret_val_DataAccessTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataAccessTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataAccessTimestamp_val_val_Seconds uint64
      lift_ret_val_DataAccessTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_access_timestamp.val.seconds)
      lift_ret_val_DataAccessTimestamp_val_val.Seconds = lift_ret_val_DataAccessTimestamp_val_val_Seconds
      var lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_access_timestamp.val.nanoseconds)
      lift_ret_val_DataAccessTimestamp_val_val.Nanoseconds = lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds
      lift_ret_val_DataAccessTimestamp_val = lift_ret_val_DataAccessTimestamp_val_val
      lift_ret_val_DataAccessTimestamp.Set(lift_ret_val_DataAccessTimestamp_val)
    } else {
      lift_ret_val_DataAccessTimestamp.Unset()
    }
    lift_ret_val.DataAccessTimestamp = lift_ret_val_DataAccessTimestamp
    var lift_ret_val_DataModificationTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_modification_timestamp.is_some {
      var lift_ret_val_DataModificationTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataModificationTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataModificationTimestamp_val_val_Seconds uint64
      lift_ret_val_DataModificationTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_modification_timestamp.val.seconds)
      lift_ret_val_DataModificationTimestamp_val_val.Seconds = lift_ret_val_DataModificationTimestamp_val_val_Seconds
      var lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_modification_timestamp.val.nanoseconds)
      lift_ret_val_DataModificationTimestamp_val_val.Nanoseconds = lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds
      lift_ret_val_DataModificationTimestamp_val = lift_ret_val_DataModificationTimestamp_val_val
      lift_ret_val_DataModificationTimestamp.Set(lift_ret_val_DataModificationTimestamp_val)
    } else {
      lift_ret_val_DataModificationTimestamp.Unset()
    }
    lift_ret_val.DataModificationTimestamp = lift_ret_val_DataModificationTimestamp
    var lift_ret_val_StatusChangeTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.status_change_timestamp.is_some {
      var lift_ret_val_StatusChangeTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val_Seconds uint64
      lift_ret_val_StatusChangeTimestamp_val_val_Seconds = uint64(lift_ret_ptr.status_change_timestamp.val.seconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Seconds = lift_ret_val_StatusChangeTimestamp_val_val_Seconds
      var lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.status_change_timestamp.val.nanoseconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Nanoseconds = lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds
      lift_ret_val_StatusChangeTimestamp_val = lift_ret_val_StatusChangeTimestamp_val_val
      lift_ret_val_StatusChangeTimestamp.Set(lift_ret_val_StatusChangeTimestamp_val)
    } else {
      lift_ret_val_StatusChangeTimestamp.Unset()
    }
    lift_ret_val.StatusChangeTimestamp = lift_ret_val_StatusChangeTimestamp
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) StatAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string) Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_descriptor_stat_error_code_t
  C.wasi_filesystem_types_method_descriptor_stat_at(lower_self , lower_path_flags , &lower_path , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptorStat, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_descriptor_stat_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptorStat
    var lift_ret_val_Type WasiFilesystem0_2_0_TypesDescriptorType
    if lift_ret_ptr.type == 0 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
    }
    if lift_ret_ptr.type == 1 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
    }
    if lift_ret_ptr.type == 2 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
    }
    if lift_ret_ptr.type == 3 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
    }
    if lift_ret_ptr.type == 4 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
    }
    if lift_ret_ptr.type == 5 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
    }
    if lift_ret_ptr.type == 6 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
    }
    if lift_ret_ptr.type == 7 {
      lift_ret_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
    }
    lift_ret_val.Type = lift_ret_val_Type
    var lift_ret_val_LinkCount WasiFilesystem0_2_0_TypesLinkCount
    var lift_ret_val_LinkCount_val uint64
    lift_ret_val_LinkCount_val = uint64(lift_ret_ptr.link_count)
    lift_ret_val_LinkCount = lift_ret_val_LinkCount_val
    lift_ret_val.LinkCount = lift_ret_val_LinkCount
    var lift_ret_val_Size WasiFilesystem0_2_0_TypesFilesize
    var lift_ret_val_Size_val uint64
    lift_ret_val_Size_val = uint64(lift_ret_ptr.size)
    lift_ret_val_Size = lift_ret_val_Size_val
    lift_ret_val.Size = lift_ret_val_Size
    var lift_ret_val_DataAccessTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_access_timestamp.is_some {
      var lift_ret_val_DataAccessTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataAccessTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataAccessTimestamp_val_val_Seconds uint64
      lift_ret_val_DataAccessTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_access_timestamp.val.seconds)
      lift_ret_val_DataAccessTimestamp_val_val.Seconds = lift_ret_val_DataAccessTimestamp_val_val_Seconds
      var lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_access_timestamp.val.nanoseconds)
      lift_ret_val_DataAccessTimestamp_val_val.Nanoseconds = lift_ret_val_DataAccessTimestamp_val_val_Nanoseconds
      lift_ret_val_DataAccessTimestamp_val = lift_ret_val_DataAccessTimestamp_val_val
      lift_ret_val_DataAccessTimestamp.Set(lift_ret_val_DataAccessTimestamp_val)
    } else {
      lift_ret_val_DataAccessTimestamp.Unset()
    }
    lift_ret_val.DataAccessTimestamp = lift_ret_val_DataAccessTimestamp
    var lift_ret_val_DataModificationTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.data_modification_timestamp.is_some {
      var lift_ret_val_DataModificationTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_DataModificationTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_DataModificationTimestamp_val_val_Seconds uint64
      lift_ret_val_DataModificationTimestamp_val_val_Seconds = uint64(lift_ret_ptr.data_modification_timestamp.val.seconds)
      lift_ret_val_DataModificationTimestamp_val_val.Seconds = lift_ret_val_DataModificationTimestamp_val_val_Seconds
      var lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.data_modification_timestamp.val.nanoseconds)
      lift_ret_val_DataModificationTimestamp_val_val.Nanoseconds = lift_ret_val_DataModificationTimestamp_val_val_Nanoseconds
      lift_ret_val_DataModificationTimestamp_val = lift_ret_val_DataModificationTimestamp_val_val
      lift_ret_val_DataModificationTimestamp.Set(lift_ret_val_DataModificationTimestamp_val)
    } else {
      lift_ret_val_DataModificationTimestamp.Unset()
    }
    lift_ret_val.DataModificationTimestamp = lift_ret_val_DataModificationTimestamp
    var lift_ret_val_StatusChangeTimestamp Option[WasiFilesystem0_2_0_TypesDatetime]
    if lift_ret_ptr.status_change_timestamp.is_some {
      var lift_ret_val_StatusChangeTimestamp_val WasiFilesystem0_2_0_TypesDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val WasiClocks0_2_0_WallClockDatetime
      var lift_ret_val_StatusChangeTimestamp_val_val_Seconds uint64
      lift_ret_val_StatusChangeTimestamp_val_val_Seconds = uint64(lift_ret_ptr.status_change_timestamp.val.seconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Seconds = lift_ret_val_StatusChangeTimestamp_val_val_Seconds
      var lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds uint32
      lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds = uint32(lift_ret_ptr.status_change_timestamp.val.nanoseconds)
      lift_ret_val_StatusChangeTimestamp_val_val.Nanoseconds = lift_ret_val_StatusChangeTimestamp_val_val_Nanoseconds
      lift_ret_val_StatusChangeTimestamp_val = lift_ret_val_StatusChangeTimestamp_val_val
      lift_ret_val_StatusChangeTimestamp.Set(lift_ret_val_StatusChangeTimestamp_val)
    } else {
      lift_ret_val_StatusChangeTimestamp.Unset()
    }
    lift_ret_val.StatusChangeTimestamp = lift_ret_val_StatusChangeTimestamp
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SetTimesAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string, data_access_timestamp WasiFilesystem0_2_0_TypesNewTimestamp, data_modification_timestamp WasiFilesystem0_2_0_TypesNewTimestamp) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var lower_data_access_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_access_timestamp.tag = 0
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_access_timestamp.tag = 1
  }
  if data_access_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {
    
    lower_data_access_timestamp.tag = 2
    lower_data_access_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_access_timestamp.val))
    var lower_data_access_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_access_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_access_timestamp_val_val_seconds := C.uint64_t(data_access_timestamp.GetTimestamp().Seconds)
    lower_data_access_timestamp_val_val.seconds = lower_data_access_timestamp_val_val_seconds
    lower_data_access_timestamp_val_val_nanoseconds := C.uint32_t(data_access_timestamp.GetTimestamp().Nanoseconds)
    lower_data_access_timestamp_val_val.nanoseconds = lower_data_access_timestamp_val_val_nanoseconds
    lower_data_access_timestamp_val = lower_data_access_timestamp_val_val
    *lower_data_access_timestamp_ptr = lower_data_access_timestamp_val
  }
  var lower_data_modification_timestamp C.wasi_filesystem_types_new_timestamp_t
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNoChange {
    lower_data_modification_timestamp.tag = 0
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindNow {
    lower_data_modification_timestamp.tag = 1
  }
  if data_modification_timestamp.Kind() == WasiFilesystem0_2_0_TypesNewTimestampKindTimestamp {
    
    lower_data_modification_timestamp.tag = 2
    lower_data_modification_timestamp_ptr := (*C.wasi_filesystem_types_datetime_t)(unsafe.Pointer(&lower_data_modification_timestamp.val))
    var lower_data_modification_timestamp_val C.wasi_clocks_wall_clock_datetime_t
    var lower_data_modification_timestamp_val_val C.wasi_clocks_wall_clock_datetime_t
    lower_data_modification_timestamp_val_val_seconds := C.uint64_t(data_modification_timestamp.GetTimestamp().Seconds)
    lower_data_modification_timestamp_val_val.seconds = lower_data_modification_timestamp_val_val_seconds
    lower_data_modification_timestamp_val_val_nanoseconds := C.uint32_t(data_modification_timestamp.GetTimestamp().Nanoseconds)
    lower_data_modification_timestamp_val_val.nanoseconds = lower_data_modification_timestamp_val_val_nanoseconds
    lower_data_modification_timestamp_val = lower_data_modification_timestamp_val_val
    *lower_data_modification_timestamp_ptr = lower_data_modification_timestamp_val
  }
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_set_times_at(lower_self , lower_path_flags , &lower_path , &lower_data_access_timestamp , &lower_data_modification_timestamp , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) LinkAt(old_path_flags WasiFilesystem0_2_0_TypesPathFlags, old_path string, new_descriptor WasiFilesystem0_2_0_TypesDescriptor, new_path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_old_path_flags := C.uint8_t(old_path_flags)
  var lower_old_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_old_path.ptr = (*uint8)(unsafe.Pointer(C.CString(old_path)))
  lower_old_path.len = C.size_t(len(old_path))
  var lower_new_descriptor C.wasi_filesystem_types_borrow_descriptor_t
  lower_new_descriptor.__handle = C.int32_t(new_descriptor)
  var lower_new_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_new_path.ptr = (*uint8)(unsafe.Pointer(C.CString(new_path)))
  lower_new_path.len = C.size_t(len(new_path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_link_at(lower_self , lower_old_path_flags , &lower_old_path , lower_new_descriptor , &lower_new_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) OpenAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string, open_flags WasiFilesystem0_2_0_TypesOpenFlags, flags WasiFilesystem0_2_0_TypesDescriptorFlags) Result[WasiFilesystem0_2_0_TypesDescriptor, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  lower_open_flags := C.uint8_t(open_flags)
  lower_flags := C.uint8_t(flags)
  var ret C.wasi_filesystem_types_result_own_descriptor_error_code_t
  C.wasi_filesystem_types_method_descriptor_open_at(lower_self , lower_path_flags , &lower_path , lower_open_flags , lower_flags , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesDescriptor, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_own_descriptor_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesDescriptor
    lift_ret_val = WasiFilesystem0_2_0_TypesDescriptor(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) ReadlinkAt(path string) Result[string, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_string_error_code_t
  C.wasi_filesystem_types_method_descriptor_readlink_at(lower_self , &lower_path , &ret )
  var lift_ret Result[string, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.p2fs_string_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val string
    lift_ret_val = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.ptr)), C.int(lift_ret_ptr.len))
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) RemoveDirectoryAt(path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_remove_directory_at(lower_self , &lower_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) RenameAt(old_path string, new_descriptor WasiFilesystem0_2_0_TypesDescriptor, new_path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_old_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_old_path.ptr = (*uint8)(unsafe.Pointer(C.CString(old_path)))
  lower_old_path.len = C.size_t(len(old_path))
  var lower_new_descriptor C.wasi_filesystem_types_borrow_descriptor_t
  lower_new_descriptor.__handle = C.int32_t(new_descriptor)
  var lower_new_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_new_path.ptr = (*uint8)(unsafe.Pointer(C.CString(new_path)))
  lower_new_path.len = C.size_t(len(new_path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_rename_at(lower_self , &lower_old_path , lower_new_descriptor , &lower_new_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) SymlinkAt(old_path string, new_path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_old_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_old_path.ptr = (*uint8)(unsafe.Pointer(C.CString(old_path)))
  lower_old_path.len = C.size_t(len(old_path))
  var lower_new_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_new_path.ptr = (*uint8)(unsafe.Pointer(C.CString(new_path)))
  lower_new_path.len = C.size_t(len(new_path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_symlink_at(lower_self , &lower_old_path , &lower_new_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) UnlinkFileAt(path string) Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_void_error_code_t
  C.wasi_filesystem_types_method_descriptor_unlink_file_at(lower_self , &lower_path , &ret )
  var lift_ret Result[struct{}, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) IsSameObject(other WasiFilesystem0_2_0_TypesDescriptor) bool {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var lower_other C.wasi_filesystem_types_borrow_descriptor_t
  lower_other.__handle = C.int32_t(other)
  ret := C.wasi_filesystem_types_method_descriptor_is_same_object(lower_self , lower_other )
  lift_ret := ret
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) MetadataHash() Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_metadata_hash_value_error_code_t
  C.wasi_filesystem_types_method_descriptor_metadata_hash(lower_self , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_metadata_hash_value_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesMetadataHashValue
    var lift_ret_val_Lower uint64
    lift_ret_val_Lower = uint64(lift_ret_ptr.lower)
    lift_ret_val.Lower = lift_ret_val_Lower
    var lift_ret_val_Upper uint64
    lift_ret_val_Upper = uint64(lift_ret_ptr.upper)
    lift_ret_val.Upper = lift_ret_val_Upper
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDescriptor) MetadataHashAt(path_flags WasiFilesystem0_2_0_TypesPathFlags, path string) Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_descriptor_t
  lower_self.__handle = C.int32_t(self)
  lower_path_flags := C.uint8_t(path_flags)
  var lower_path C.p2fs_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_path.ptr = (*uint8)(unsafe.Pointer(C.CString(path)))
  lower_path.len = C.size_t(len(path))
  var ret C.wasi_filesystem_types_result_metadata_hash_value_error_code_t
  C.wasi_filesystem_types_method_descriptor_metadata_hash_at(lower_self , lower_path_flags , &lower_path , &ret )
  var lift_ret Result[WasiFilesystem0_2_0_TypesMetadataHashValue, WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_metadata_hash_value_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesMetadataHashValue
    var lift_ret_val_Lower uint64
    lift_ret_val_Lower = uint64(lift_ret_ptr.lower)
    lift_ret_val.Lower = lift_ret_val_Lower
    var lift_ret_val_Upper uint64
    lift_ret_val_Upper = uint64(lift_ret_ptr.upper)
    lift_ret_val.Upper = lift_ret_val_Upper
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func (self WasiFilesystem0_2_0_TypesDirectoryEntryStream) ReadDirectoryEntry() Result[Option[WasiFilesystem0_2_0_TypesDirectoryEntry], WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_self C.wasi_filesystem_types_borrow_directory_entry_stream_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_filesystem_types_result_option_directory_entry_error_code_t
  C.wasi_filesystem_types_method_directory_entry_stream_read_directory_entry(lower_self , &ret )
  var lift_ret Result[Option[WasiFilesystem0_2_0_TypesDirectoryEntry], WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_filesystem_types_error_code_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if lift_ret_ptr == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if lift_ret_ptr == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if lift_ret_ptr == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if lift_ret_ptr == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if lift_ret_ptr == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if lift_ret_ptr == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if lift_ret_ptr == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if lift_ret_ptr == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if lift_ret_ptr == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if lift_ret_ptr == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if lift_ret_ptr == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if lift_ret_ptr == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if lift_ret_ptr == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if lift_ret_ptr == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if lift_ret_ptr == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if lift_ret_ptr == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if lift_ret_ptr == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if lift_ret_ptr == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if lift_ret_ptr == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if lift_ret_ptr == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if lift_ret_ptr == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if lift_ret_ptr == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if lift_ret_ptr == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if lift_ret_ptr == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if lift_ret_ptr == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if lift_ret_ptr == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if lift_ret_ptr == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if lift_ret_ptr == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if lift_ret_ptr == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if lift_ret_ptr == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if lift_ret_ptr == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if lift_ret_ptr == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if lift_ret_ptr == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if lift_ret_ptr == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if lift_ret_ptr == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if lift_ret_ptr == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if lift_ret_ptr == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_filesystem_types_option_directory_entry_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val Option[WasiFilesystem0_2_0_TypesDirectoryEntry]
    if lift_ret_ptr.is_some {
      var lift_ret_val_val WasiFilesystem0_2_0_TypesDirectoryEntry
      var lift_ret_val_val_Type WasiFilesystem0_2_0_TypesDescriptorType
      if lift_ret_ptr.val.type == 0 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeUnknown()
      }
      if lift_ret_ptr.val.type == 1 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeBlockDevice()
      }
      if lift_ret_ptr.val.type == 2 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeCharacterDevice()
      }
      if lift_ret_ptr.val.type == 3 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeDirectory()
      }
      if lift_ret_ptr.val.type == 4 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeFifo()
      }
      if lift_ret_ptr.val.type == 5 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSymbolicLink()
      }
      if lift_ret_ptr.val.type == 6 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeRegularFile()
      }
      if lift_ret_ptr.val.type == 7 {
        lift_ret_val_val_Type = WasiFilesystem0_2_0_TypesDescriptorTypeSocket()
      }
      lift_ret_val_val.Type = lift_ret_val_val_Type
      var lift_ret_val_val_Name string
      lift_ret_val_val_Name = C.GoStringN((*C.char)(unsafe.Pointer(lift_ret_ptr.val.name.ptr)), C.int(lift_ret_ptr.val.name.len))
      lift_ret_val_val.Name = lift_ret_val_val_Name
      lift_ret_val.Set(lift_ret_val_val)
    } else {
      lift_ret_val.Unset()
    }
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiFilesystem0_2_0_TypesFilesystemErrorCode(err WasiFilesystem0_2_0_TypesError) Option[WasiFilesystem0_2_0_TypesErrorCode] {
  var lower_err C.wasi_filesystem_types_borrow_error_t
  lower_err.__handle = C.int32_t(err)
  var ret C.wasi_filesystem_types_option_error_code_t
  C.wasi_filesystem_types_filesystem_error_code(lower_err , &ret )
  var lift_ret Option[WasiFilesystem0_2_0_TypesErrorCode]
  if ret.is_some {
    var lift_ret_val WasiFilesystem0_2_0_TypesErrorCode
    if ret.val == 0 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAccess()
    }
    if ret.val == 1 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeWouldBlock()
    }
    if ret.val == 2 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeAlready()
    }
    if ret.val == 3 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBadDescriptor()
    }
    if ret.val == 4 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeBusy()
    }
    if ret.val == 5 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeDeadlock()
    }
    if ret.val == 6 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeQuota()
    }
    if ret.val == 7 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeExist()
    }
    if ret.val == 8 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeFileTooLarge()
    }
    if ret.val == 9 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIllegalByteSequence()
    }
    if ret.val == 10 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInProgress()
    }
    if ret.val == 11 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInterrupted()
    }
    if ret.val == 12 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalid()
    }
    if ret.val == 13 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIo()
    }
    if ret.val == 14 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeIsDirectory()
    }
    if ret.val == 15 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeLoop()
    }
    if ret.val == 16 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTooManyLinks()
    }
    if ret.val == 17 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeMessageSize()
    }
    if ret.val == 18 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNameTooLong()
    }
    if ret.val == 19 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoDevice()
    }
    if ret.val == 20 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoEntry()
    }
    if ret.val == 21 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoLock()
    }
    if ret.val == 22 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientMemory()
    }
    if ret.val == 23 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInsufficientSpace()
    }
    if ret.val == 24 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotDirectory()
    }
    if ret.val == 25 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotEmpty()
    }
    if ret.val == 26 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotRecoverable()
    }
    if ret.val == 27 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeUnsupported()
    }
    if ret.val == 28 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoTty()
    }
    if ret.val == 29 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNoSuchDevice()
    }
    if ret.val == 30 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeOverflow()
    }
    if ret.val == 31 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeNotPermitted()
    }
    if ret.val == 32 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodePipe()
    }
    if ret.val == 33 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeReadOnly()
    }
    if ret.val == 34 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeInvalidSeek()
    }
    if ret.val == 35 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeTextFileBusy()
    }
    if ret.val == 36 {
      lift_ret_val = WasiFilesystem0_2_0_TypesErrorCodeCrossDevice()
    }
    lift_ret.Set(lift_ret_val)
  } else {
    lift_ret.Unset()
  }
  return lift_ret
}

