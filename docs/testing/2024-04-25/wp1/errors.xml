<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="56" failures="21" errors="0" time="9.854520">
	<testsuite tests="56" failures="21" time="0.000000" name="errors" timestamp="2024-04-25T13:26:47Z">
		<properties>
			<property name="go.version" value="go1.22.2 linux/arm64"></property>
		</properties>
		<testcase classname="errors" name="TestAs" time="0.000000">
			<failure message="Failed" type="">=== RUN   TestAs&#xA;--- FAIL: TestAs (0.02s)&#xA;=== RUN   TestAs/0:As(Errorf(...,_&lt;nil&gt;),_0x44e30)&#xA;    --- PASS: TestAs/0:As(Errorf(...,_&lt;nil&gt;),_0x44e30) (0.00s)&#xA;=== RUN   TestAs/1:As(Errorf(...,_pitied_the_fool),_errorT())&#xA;    --- PASS: TestAs/1:As(Errorf(...,_pitied_the_fool),_errorT()) (0.00s)&#xA;=== RUN   TestAs/2:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e30)&#xA;    --- PASS: TestAs/2:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e30) (0.00s)&#xA;=== RUN   TestAs/3:As(Errorf(...,_errorT()),_0x44e30)&#xA;    --- PASS: TestAs/3:As(Errorf(...,_errorT()),_0x44e30) (0.00s)&#xA;=== RUN   TestAs/4:As(Errorf(...,_wrapped),_errorT(T))&#xA;    --- PASS: TestAs/4:As(Errorf(...,_wrapped),_errorT(T)) (0.00s)&#xA;=== RUN   TestAs/5:As(Errorf(...,_error),_errorT())&#xA;    --- PASS: TestAs/5:As(Errorf(...,_error),_errorT()) (0.00s)&#xA;=== RUN   TestAs/6:As(Errorf(...,_path),_0x44e30)&#xA;    --- PASS: TestAs/6:As(Errorf(...,_path),_0x44e30) (0.00s)&#xA;=== RUN   TestAs/7:As(Errorf(...,_oh_no),_0x44e50)&#xA;    --- PASS: TestAs/7:As(Errorf(...,_oh_no),_0x44e50) (0.00s)&#xA;=== RUN   TestAs/8:As(Errorf(...,_err),_0x44e40)&#xA;        match: got true; want false&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;        got &amp;errors.errorString{s:&#34;err&#34;}, want &lt;nil&gt;&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;    --- FAIL: TestAs/8:As(Errorf(...,_err),_0x44e40) (0.00s)&#xA;=== RUN   TestAs/9:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e40)&#xA;    --- PASS: TestAs/9:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e40) (0.00s)&#xA;=== RUN   TestAs/10:As(Errorf(...,_path_error),_0x44e40)&#xA;        got errors_test.wrapped{msg:&#34;path error&#34;, err:(*fs.PathError)(0x44e70)}, want &amp;fs.PathError{Op:&#34;open&#34;, Path:&#34;non-existing&#34;, Err:(*errors.errorString)(0x26cdc)}&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;    --- FAIL: TestAs/10:As(Errorf(...,_path_error),_0x44e40) (0.00s)&#xA;=== RUN   TestAs/11:As(Errorf(...,_multiError),_errorT(poser))&#xA;    --- PASS: TestAs/11:As(Errorf(...,_multiError),_errorT(poser)) (0.00s)&#xA;=== RUN   TestAs/12:As(Errorf(...,_multiError),_errorT())&#xA;    --- PASS: TestAs/12:As(Errorf(...,_multiError),_errorT()) (0.00s)&#xA;=== RUN   TestAs/13:As(Errorf(...,_multiError),_errorT(T))&#xA;    --- PASS: TestAs/13:As(Errorf(...,_multiError),_errorT(T)) (0.00s)&#xA;=== RUN   TestAs/14:As(Errorf(...,_multiError),_errorT(T))&#xA;    --- PASS: TestAs/14:As(Errorf(...,_multiError),_errorT(T)) (0.00s)&#xA;=== RUN   TestAs/15:As(Errorf(...,_multiError),_errorT(a))&#xA;    --- PASS: TestAs/15:As(Errorf(...,_multiError),_errorT(a)) (0.00s)&#xA;=== RUN   TestAs/16:As(Errorf(...,_multiError),_0x44e40)&#xA;        got errors_test.multiErr{errors_test.wrapped{msg:&#34;path error&#34;, err:(*fs.PathError)(0x44e70)}}, want &amp;fs.PathError{Op:&#34;open&#34;, Path:&#34;non-existing&#34;, Err:(*errors.errorString)(0x26cdc)}&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;    --- FAIL: TestAs/16:As(Errorf(...,_multiError),_0x44e40) (0.00s)&#xA;=== RUN   TestAs/17:As(Errorf(...,_multiError),_errorT(a))&#xA;    --- PASS: TestAs/17:As(Errorf(...,_multiError),_errorT(a)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/1:As(Errorf(...,_pitied_the_fool),_errorT())" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/1:As(Errorf(...,_pitied_the_fool),_errorT())&#xA;    --- PASS: TestAs/1:As(Errorf(...,_pitied_the_fool),_errorT()) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/4:As(Errorf(...,_wrapped),_errorT(T))" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/4:As(Errorf(...,_wrapped),_errorT(T))&#xA;    --- PASS: TestAs/4:As(Errorf(...,_wrapped),_errorT(T)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAsValidation" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAsValidation&#xA;=== RUN   TestAsValidation/&lt;nil&gt;(&lt;nil&gt;)&#xA;panic: errors: target cannot be nil&#xA;Error: failed to run main module `/tmp/tinygo4037084912/main`&#xA;&#xA;Caused by:&#xA;    0: failed to invoke command default&#xA;    1: error while executing at wasm backtrace:&#xA;           0: 0x34d1 - runtime.abort&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/runtime_tinygowasm.go:70:6              - runtime._panic&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/panic.go:65:7&#xA;           1: 0x10295 - (Go interface method)&#xA;                           at /usr/local/go/src/errors/wrap.go:102:8              - errors.As&#xA;                           at /usr/local/go/src/errors/wrap.go:109:24&#xA;           2: 0x679e1 - errors_test.TestAsValidation$1&#xA;                           at /usr/local/go/src/errors/wrap_test.go:232:22&#xA;           3: 0x2274b - testing.tRunner&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:427:4&#xA;           4: 0x49820 - (*testing.T).Run&#xA;           5: 0x67826 - errors_test.TestAsValidation&#xA;                           at /usr/local/go/src/errors/wrap_test.go:228:8&#xA;           6: 0x2274b - testing.tRunner&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:427:4&#xA;           7: 0x49820 - (*testing.T).Run&#xA;           8: 0x22453 - testing.runTests$1&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:561:10&#xA;           9: 0x2274b - testing.tRunner&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:427:4&#xA;          10: 0x1dc51 - testing.runTests&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:559:10              - (*testing.M).Run&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:533:29              - main.main&#xA;                           at /home/vscode/.cache/go-build/29/296ea2046c05354d953725f9ec87bf4599cebf04d3fee3fb5de97bc80e2f53e0-d:83:15              - runtime.run$1&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler_any.go:25:11&#xA;          11: 0x19a7a - &lt;goroutine wrapper&gt;&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler_any.go:23:2&#xA;          12:  0x665 - tinygo_launch&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/internal/task/task_asyncify_wasm.S:59&#xA;          13: 0x19950 - (*internal/task.Task).Resume&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/internal/task/task_asyncify.go:109:17              - runtime.scheduler&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler.go:236:11              - runtime.run&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler_any.go:28:11              - _start&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/runtime_wasip1.go:21:5&#xA;    2: wasm trap: wasm `unreachable` instruction executed&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/3:As(Errorf(...,_errorT()),_0x44e30)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/3:As(Errorf(...,_errorT()),_0x44e30)&#xA;    --- PASS: TestAs/3:As(Errorf(...,_errorT()),_0x44e30) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/6:As(Errorf(...,_path),_0x44e30)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/6:As(Errorf(...,_path),_0x44e30)&#xA;    --- PASS: TestAs/6:As(Errorf(...,_path),_0x44e30) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/13:As(Errorf(...,_multiError),_errorT(T))" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/13:As(Errorf(...,_multiError),_errorT(T))&#xA;    --- PASS: TestAs/13:As(Errorf(...,_multiError),_errorT(T)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/15:As(Errorf(...,_multiError),_errorT(a))" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/15:As(Errorf(...,_multiError),_errorT(a))&#xA;    --- PASS: TestAs/15:As(Errorf(...,_multiError),_errorT(a)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/16:As(Errorf(...,_multiError),_0x44e40)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/16:As(Errorf(...,_multiError),_0x44e40)&#xA;        got errors_test.multiErr{errors_test.wrapped{msg:&#34;path error&#34;, err:(*fs.PathError)(0x44e70)}}, want &amp;fs.PathError{Op:&#34;open&#34;, Path:&#34;non-existing&#34;, Err:(*errors.errorString)(0x26cdc)}&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;    --- FAIL: TestAs/16:As(Errorf(...,_multiError),_0x44e40) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAsValidation/&lt;nil&gt;(&lt;nil&gt;)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAsValidation/&lt;nil&gt;(&lt;nil&gt;)&#xA;panic: errors: target cannot be nil&#xA;Error: failed to run main module `/tmp/tinygo4037084912/main`&#xA;&#xA;Caused by:&#xA;    0: failed to invoke command default&#xA;    1: error while executing at wasm backtrace:&#xA;           0: 0x34d1 - runtime.abort&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/runtime_tinygowasm.go:70:6              - runtime._panic&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/panic.go:65:7&#xA;           1: 0x10295 - (Go interface method)&#xA;                           at /usr/local/go/src/errors/wrap.go:102:8              - errors.As&#xA;                           at /usr/local/go/src/errors/wrap.go:109:24&#xA;           2: 0x679e1 - errors_test.TestAsValidation$1&#xA;                           at /usr/local/go/src/errors/wrap_test.go:232:22&#xA;           3: 0x2274b - testing.tRunner&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:427:4&#xA;           4: 0x49820 - (*testing.T).Run&#xA;           5: 0x67826 - errors_test.TestAsValidation&#xA;                           at /usr/local/go/src/errors/wrap_test.go:228:8&#xA;           6: 0x2274b - testing.tRunner&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:427:4&#xA;           7: 0x49820 - (*testing.T).Run&#xA;           8: 0x22453 - testing.runTests$1&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:561:10&#xA;           9: 0x2274b - testing.tRunner&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:427:4&#xA;          10: 0x1dc51 - testing.runTests&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:559:10              - (*testing.M).Run&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/testing/testing.go:533:29              - main.main&#xA;                           at /home/vscode/.cache/go-build/29/296ea2046c05354d953725f9ec87bf4599cebf04d3fee3fb5de97bc80e2f53e0-d:83:15              - runtime.run$1&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler_any.go:25:11&#xA;          11: 0x19a7a - &lt;goroutine wrapper&gt;&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler_any.go:23:2&#xA;          12:  0x665 - tinygo_launch&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/internal/task/task_asyncify_wasm.S:59&#xA;          13: 0x19950 - (*internal/task.Task).Resume&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/internal/task/task_asyncify.go:109:17              - runtime.scheduler&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler.go:236:11              - runtime.run&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/scheduler_any.go:28:11              - _start&#xA;                           at /workspaces/dc-wasm-go/tinygo/src/runtime/runtime_wasip1.go:21:5&#xA;    2: wasm trap: wasm `unreachable` instruction executed&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/12:As(Errorf(...,_multiError),_errorT())" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/12:As(Errorf(...,_multiError),_errorT())&#xA;    --- PASS: TestAs/12:As(Errorf(...,_multiError),_errorT()) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/2:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e30)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/2:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e30)&#xA;    --- PASS: TestAs/2:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e30) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/5:As(Errorf(...,_error),_errorT())" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/5:As(Errorf(...,_error),_errorT())&#xA;    --- PASS: TestAs/5:As(Errorf(...,_error),_errorT()) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/7:As(Errorf(...,_oh_no),_0x44e50)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/7:As(Errorf(...,_oh_no),_0x44e50)&#xA;    --- PASS: TestAs/7:As(Errorf(...,_oh_no),_0x44e50) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/8:As(Errorf(...,_err),_0x44e40)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/8:As(Errorf(...,_err),_0x44e40)&#xA;        match: got true; want false&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;        got &amp;errors.errorString{s:&#34;err&#34;}, want &lt;nil&gt;&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;    --- FAIL: TestAs/8:As(Errorf(...,_err),_0x44e40) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/10:As(Errorf(...,_path_error),_0x44e40)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/10:As(Errorf(...,_path_error),_0x44e40)&#xA;        got errors_test.wrapped{msg:&#34;path error&#34;, err:(*fs.PathError)(0x44e70)}, want &amp;fs.PathError{Op:&#34;open&#34;, Path:&#34;non-existing&#34;, Err:(*errors.errorString)(0x26cdc)}&#xA;        FailNow is incomplete, requires runtime.Goexit()&#xA;    --- FAIL: TestAs/10:As(Errorf(...,_path_error),_0x44e40) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/9:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e40)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/9:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e40)&#xA;    --- PASS: TestAs/9:As(Errorf(...,_open_non-existing:_file_does_not_exist),_0x44e40) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/14:As(Errorf(...,_multiError),_errorT(T))" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/14:As(Errorf(...,_multiError),_errorT(T))&#xA;    --- PASS: TestAs/14:As(Errorf(...,_multiError),_errorT(T)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/0:As(Errorf(...,_&lt;nil&gt;),_0x44e30)" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/0:As(Errorf(...,_&lt;nil&gt;),_0x44e30)&#xA;    --- PASS: TestAs/0:As(Errorf(...,_&lt;nil&gt;),_0x44e30) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/11:As(Errorf(...,_multiError),_errorT(poser))" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/11:As(Errorf(...,_multiError),_errorT(poser))&#xA;    --- PASS: TestAs/11:As(Errorf(...,_multiError),_errorT(poser)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestAs/17:As(Errorf(...,_multiError),_errorT(a))" time="-0.000000">
			<failure message="Failed" type="">=== RUN   TestAs/17:As(Errorf(...,_multiError),_errorT(a))&#xA;    --- PASS: TestAs/17:As(Errorf(...,_multiError),_errorT(a)) (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="errors" name="TestNewEqual" time="0.000000"></testcase>
		<testcase classname="errors" name="TestErrorMethod" time="0.000000"></testcase>
		<testcase classname="errors" name="TestJoinReturnsNil" time="0.000000"></testcase>
		<testcase classname="errors" name="TestJoin" time="0.000000"></testcase>
		<testcase classname="errors" name="TestJoinErrorMethod" time="0.000000"></testcase>
		<testcase classname="errors" name="TestIs" time="0.000000"></testcase>
	</testsuite>
</testsuites>